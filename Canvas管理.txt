using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.Linq;

public class UICanvasSort : MonoBehaviour
{
    public Transform cUIRoot;
    public Transform cRootBottom;
    public Transform cRootNormal;
    public Transform cRootTop;

    
    private int sortDiv = 100;

    private Dictionary<EUISortingLayer, string> dUISortName = new Dictionary<EUISortingLayer, string>
    {
        { EUISortingLayer.UIBotton, "UI_Bottom" },
        { EUISortingLayer.UINormal, "UI_Normal" },
        { EUISortingLayer.UITop, "UI_Top" }
    };
    public Dictionary<UIModuleParam, List<Canvas>> cAllUICanvas = new Dictionary<UIModuleParam, List<Canvas>>();

    public Dictionary<EUISortingLayer, Transform> cAllSortingTrans = new Dictionary<EUISortingLayer, Transform>();
    void Awake()
    {
        cUIRoot = transform.Find("UIRoot");
        cRootBottom = cUIRoot.transform.Find("Bottom");
        cRootNormal = cUIRoot.transform.Find("Normal");
        cRootTop = cUIRoot.transform.Find("Top");
        cAllSortingTrans.Add(EUISortingLayer.UIBotton, cRootBottom);
        cAllSortingTrans.Add(EUISortingLayer.UINormal, cRootNormal);
        cAllSortingTrans.Add(EUISortingLayer.UITop, cRootTop);
    }


    public void AddUIObj(GameObject resObj,UIModuleParam moduleParam)  
    {
        
        EUISortingLayer mSortingLayer = moduleParam.mViewerParam.bSortingLayer;
        resObj.transform.SetParent(cAllSortingTrans[mSortingLayer].transform);
        resObj.transform.localPosition = Vector3.zero;
        resObj.transform.localScale = Vector3.one;
        //全屏界面才需要设置
        if (!moduleParam.mViewerParam.bIsPopWindow){
            UIUtil.SetStretch(resObj);
        }

        var rCanvas = resObj.GetComponent<Canvas>();
        if (rCanvas == null)
            rCanvas = resObj.AddComponent<Canvas>();

        var rGraphicRaycaster = resObj.GetComponent<GraphicRaycaster>();
        if (rGraphicRaycaster == null)
            rGraphicRaycaster = resObj.AddComponent<GraphicRaycaster>();

        var objCanvas = resObj.transform.GetComponentsInChildren<Canvas>();
        foreach (var item in objCanvas){
            item.overrideSorting = true;
            item.sortingLayerName = dUISortName[mSortingLayer];
            AddCanvas(moduleParam, item);
        }
        SortCanvas();
    }

    public void SortCanvas()
    {   
        int sortingOrder = 0;
        Dictionary<UIModuleParam, List<Canvas>> sortedDictionary = GetSortedUICanvas();
        foreach (var kvp in sortedDictionary)
        {
            UIModuleParam moduleParam = kvp.Key;
            List<Canvas> canvasList = kvp.Value;
            foreach (var canvas in canvasList)
            {
                canvas.sortingOrder = sortingOrder;
                sortingOrder += sortDiv;
            }
        }
    }

    private void AddCanvas(UIModuleParam moduleParam, Canvas canvas)
    {
        if (!cAllUICanvas.ContainsKey(moduleParam))
        {
            cAllUICanvas[moduleParam] = new List<Canvas>();
        }
        cAllUICanvas[moduleParam].Add(canvas);
    }


    private List<Canvas> GetCanvasesByModuleName(UIModuleParam moduleParam)
    {
        if (cAllUICanvas.TryGetValue(moduleParam, out List<Canvas> canvases))
        {
            return canvases;
        }
        return new List<Canvas>(); 
    }

    private Dictionary<UIModuleParam, List<Canvas>> GetSortedUICanvas()
    {
        var sortedDictionary = cAllUICanvas.OrderBy(kvp => kvp.Key.mViewerParam.bOrderInLayer)
                                           .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

        return sortedDictionary;
    }

    public void OnRemoveUIObj(UIModuleParam moduleParam)
    {
        if (cAllUICanvas.ContainsKey(moduleParam))
        {
            cAllUICanvas.Remove(moduleParam);
        }
        SortCanvas();
    }

	public void ChangeUISortingLayer(UIModuleParam moduleParam, int sortingOrder)
	{
		
	}

}
