先配置
  git config --global user.email "you@example.com" 
  git config --global user.name "Your Name" 

  git config --list 查看配置
  
指定目录作为git仓库
git init

添加新文件
git add filename

提交版本
现在我们已经添加了这些文件，我们希望它们能够真正被保存在Git仓库。
为此，我们将它们提交到仓库
git commit -m "Adding files"


工作流程

1、克隆仓库
如果你要参与一个已有的项目，首先需要将远程仓库克隆到本地
git clone https://github.com/username/repo.git
cd repo

2、创建新分支
为了避免直接在 main 或 master 分支上进行开发，通常会创建一个新的分支：
git checkout -b new-feature

3、工作目录
在工作目录中进行代码编辑、添加新文件或删除不需要的文件

4、暂存文件
将修改过的文件添加到暂存区，以便进行下一步的提交操作：

git add filename
# 或者添加所有修改的文件
git add .

5、提交更改
将暂存区的更改提交到本地仓库，并添加提交信息：

git commit -m "Add new feature"

6、拉取最新更改
在推送本地更改之前，最好从远程仓库拉取最新的更改，以避免冲突：

git pull origin main
# 或者如果在新的分支上工作
git pull origin new-feature

7、推送更改
将本地的提交推送到远程仓库：

git push origin new-feature

8、创建 Pull Request（PR）
在 GitHub 或其他托管平台上创建 Pull Request，邀请团队成员进行代码审查。PR 合并后，你的更改就会合并到主分支

9、合并更改
在 PR 审核通过并合并后，可以将远程仓库的主分支合并到本地分支：

git checkout main
git pull origin main
git merge new-feature

10、删除分支
如果不再需要新功能分支，可以将其删除：

git branch -d new-feature
或者从远程仓库删除分支：

git push origin --delete new-feature




当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。


1、工作区（Working Directory）
工作区是你在本地计算机上的项目目录，你在这里进行文件的创建、修改和删除操作。工作区包含了当前项目的所有文件和子目录。

特点：

显示项目的当前状态。
文件的修改在工作区中进行，但这些修改还没有被记录到版本控制中。
2、暂存区（Staging Area）
暂存区是一个临时存储区域，它包含了即将被提交到版本库中的文件快照，在提交之前，你可以选择性地将工作区中的修改添加到暂存区。

特点：

暂存区保存了将被包括在下一个提交中的更改。
你可以多次使用 git add 命令来将文件添加到暂存区，直到你准备好提交所有更改。
常用命令：

git add filename       # 将单个文件添加到暂存区
git add .              # 将工作区中的所有修改添加到暂存区
git status             # 查看哪些文件在暂存区中

3、版本库（Repository）
版本库包含项目的所有版本历史记录。

每次提交都会在版本库中创建一个新的快照，这些快照是不可变的，确保了项目的完整历史记录。

特点：

版本库分为本地版本库和远程版本库。这里主要指本地版本库。
本地版本库存储在 .git 目录中，它包含了所有提交的对象和引用。
常用命令：

git commit -m "Commit message"   # 将暂存区的更改提交到本地版本库
git log                          # 查看提交历史
git diff                         # 查看工作区和暂存区之间的差异
git diff --cached                # 查看暂存区和最后一次提交之间的差异



创建分支
创建新分支并切换到该分支：

git checkout -b <branchname>
例如：

git checkout -b feature-xyz
切换分支命令:

git checkout (branchname)
例如：

git checkout main
当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。


1、git checkout：检查出特定版本的文件
git checkout 命令用于切换分支或恢复工作目录中的文件到指定的提交。

恢复工作目录中的文件到某个提交：

git checkout <commit> -- <filename>
例如，将 file.txt 恢复到 abc123 提交时的版本：

git checkout abc123 -- file.txt
切换到特定提交：

git checkout <commit>
例如：

git checkout abc123
这种方式切换到特定的提交时，处于分离头指针（detached HEAD）状态。

2、git reset：重置当前分支到特定提交
git reset 命令可以更改当前分支的提交历史，它有三种主要模式：--soft、--mixed 和 --hard。

--soft：只重置 HEAD 到指定的提交，暂存区和工作目录保持不变。

git reset --soft <commit>
--mixed（默认）：重置 HEAD 到指定的提交，暂存区重置，但工作目录保持不变。

git reset --mixed <commit>
--hard：重置 HEAD 到指定的提交，暂存区和工作目录都重置。

git reset --hard <commit>
例如，将当前分支重置到 abc123 提交：

git reset --hard abc123
3、git revert：撤销某次提交
git revert 命令创建一个新的提交，用来撤销指定的提交，它不会改变提交历史，适用于已经推送到远程仓库的提交。

git revert <commit>
例如，撤销 abc123 提交：

git revert abc123
4、git reflog：查看历史操作记录
git reflog 命令记录了所有 HEAD 的移动。即使提交被删除或重置，也可以通过 reflog 找回。

git reflog
利用 reflog 可以找到之前的提交哈希，从而恢复到特定状态。例如：

git reset --hard HEAD@{3}



Git Flow 工作流程
1. 初始化 Git Flow
首先，在项目中初始化 Git Flow。可以使用 Git Flow 插件（例如 git-flow）来简化操作。

git flow init
初始化时，你需要设置分支命名规则和默认分支。

2. 创建功能分支
当开始开发一个新功能时，从 develop 分支创建一个功能分支。

git flow feature start feature-name
完成开发后，将功能分支合并回 develop 分支，并删除功能分支。

git flow feature finish feature-name
3. 创建发布分支
当准备发布一个新版本时，从 develop 分支创建一个发布分支。

git flow release start release-name
在发布分支上进行最后的测试和修复，准备好发布后，将发布分支合并回 develop 和 master 分支，并打上版本标签。

git flow release finish release-name
4. 创建修复分支
当发现需要紧急修复的问题时，从 master 分支创建一个修复分支。

git flow hotfix start hotfix-name
修复完成后，将修复分支合并回 master 和 develop 分支，并打上版本标签。

git flow hotfix finish hotfix-name